# init_module ________________________________________________
# long sys_init_module(void __user *umod,
#		unsigned long len,
#		const char __user *uargs)
#

@define _SYSCALL_INIT_MODULE_NAME
%(
	name = "init_module"
%)

@define _SYSCALL_INIT_MODULE_ARGSTR
%(
	argstr = sprintf("%p, %u, %s", umod_uaddr, len, uargs)
%)

@define _SYSCALL_INIT_MODULE_REGARGS
%(
	umod_uaddr = pointer_arg(1)
	len = ulong_arg(2)
	uargs = user_string_quoted(pointer_arg(3))
%)

probe syscall.init_module = dw_syscall.init_module !, nd_syscall.init_module ? {}
probe syscall.init_module.return = dw_syscall.init_module.return !,
                                   nd_syscall.init_module.return ? {}

# dw_init_module _____________________________________________________

probe dw_syscall.init_module = kernel.function("sys_init_module").call ?
{
	@_SYSCALL_INIT_MODULE_NAME
	umod_uaddr = $umod
	len = __ulong($len)
	uargs = user_string_quoted($uargs)
	@_SYSCALL_INIT_MODULE_ARGSTR
}
probe dw_syscall.init_module.return = kernel.function("sys_init_module").return ?
{
	@_SYSCALL_INIT_MODULE_NAME
	@SYSC_RETVALSTR($return)
}

# nd_init_module _____________________________________________________

probe nd_syscall.init_module = nd1_syscall.init_module!, nd2_syscall.init_module!, tp_syscall.init_module
  { }

probe nd1_syscall.init_module = kprobe.function("sys_init_module") ?
{
	@_SYSCALL_INIT_MODULE_NAME
	asmlinkage()
	@_SYSCALL_INIT_MODULE_REGARGS
	@_SYSCALL_INIT_MODULE_ARGSTR
}

/* kernel 4.17+ */
probe nd2_syscall.init_module = kprobe.function(@arch_syscall_prefix "sys_init_module") ?
{
	__set_syscall_pt_regs(pointer_arg(1))
	@_SYSCALL_INIT_MODULE_NAME
	@_SYSCALL_INIT_MODULE_REGARGS
	@_SYSCALL_INIT_MODULE_ARGSTR
}

/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.init_module = kernel.trace("sys_enter")
{
	__set_syscall_pt_regs($regs)
	@__syscall_compat_gate(@const("__NR_init_module"), @const("__NR_compat_init_module"))
	@_SYSCALL_INIT_MODULE_NAME
	@_SYSCALL_INIT_MODULE_REGARGS
	@_SYSCALL_INIT_MODULE_ARGSTR
}

probe nd_syscall.init_module.return = nd1_syscall.init_module.return!, nd2_syscall.init_module.return!, tp_syscall.init_module.return
  { }
  
probe nd1_syscall.init_module.return =
	kprobe.function("sys_init_module").return ?
{
	@_SYSCALL_INIT_MODULE_NAME
	@SYSC_RETVALSTR(returnval())
}

/* kernel 4.17+ */
probe nd2_syscall.init_module.return = kprobe.function(@arch_syscall_prefix "sys_init_module").return ?
{
	@_SYSCALL_INIT_MODULE_NAME
	@SYSC_RETVALSTR(returnval())
}
 
/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.init_module.return = kernel.trace("sys_exit")
{
	__set_syscall_pt_regs($regs)
	@__syscall_compat_gate(@const("__NR_init_module"), @const("__NR_compat_init_module"))
	@_SYSCALL_INIT_MODULE_NAME
	@SYSC_RETVALSTR($ret)
}
