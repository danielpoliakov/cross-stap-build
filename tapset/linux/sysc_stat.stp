# stat _______________________________________________________
# long sys_stat(char __user * filename, struct __old_stat __user * statbuf)
# long sys32_stat64(char __user * filename, struct stat64 __user *statbuf)
# long sys_stat64(char __user * filename, struct stat64 __user * statbuf)
# long sys_oabi_stat64(char __user * filename, struct oldabi_stat64 __user * statbuf)
# long compat_sys_newstat(char __user * filename, struct compat_stat __user *statbuf)
# COMPAT_SYSCALL_DEFINE2(s390_stat64, const char __user *, filename, struct stat64_emu31 __user *, statbuf)
#

@define _SYSCALL_STAT_NAME
%(
	name = "stat"
%)

@define _SYSCALL_STAT_ARGSTR
%(
	argstr = sprintf("%s, %p", filename, buf_uaddr)
%)

@define _SYSCALL_STAT_REGARGS
%(
	filename_uaddr = pointer_arg(1)
	filename = user_string_quoted(filename_uaddr)
	buf_uaddr = pointer_arg(2)
%)

probe syscall.stat = dw_syscall.stat !, nd_syscall.stat ? {}
probe syscall.stat.return = dw_syscall.stat.return !, nd_syscall.stat.return ? {}

# dw_stat _____________________________________________________

probe dw_syscall.stat = kernel.function("sys_stat").call ?,
                     kernel.function("sys_newstat").call ?,
                     kernel.function("sys32_stat64").call ?,
                     kernel.function("sys_stat64").call ?,
                     kernel.function("sys_oabi_stat64").call ?,
%( arch == "s390" %?
                     kernel.function("compat_sys_s390_stat64").call ?,
%)
%( arch == "x86_64" %?
                     kernel.function("compat_sys_x86_stat64").call ?,
%)
                     kernel.function("compat_sys_newstat").call ?
{
	@_SYSCALL_STAT_NAME
	filename_uaddr = $filename
	filename = user_string_quoted($filename)
	buf_uaddr = $statbuf
	@_SYSCALL_STAT_ARGSTR
}
probe dw_syscall.stat.return = kernel.function("sys_stat").return ?,
                            kernel.function("sys_newstat").return ?,
                            kernel.function("sys32_stat64").return ?,
                            kernel.function("sys_stat64").return ?,
                            kernel.function("sys_oabi_stat64").return ?,
%( arch == "s390" %?
                            kernel.function("compat_sys_s390_stat64").return ?,
%)
%( arch == "x86_64" %?
                            kernel.function("compat_sys_x86_stat64").return ?,
%)
                            kernel.function("compat_sys_newstat").return ?
{
	@_SYSCALL_STAT_NAME
	@SYSC_RETVALSTR($return)
}

# nd_stat _____________________________________________________

probe nd_syscall.stat = nd1_syscall.stat!, nd2_syscall.stat!, tp_syscall.stat
  { }

probe nd1_syscall.stat = kprobe.function("sys_stat") ?,
                         kprobe.function("sys_newstat") ?,
                         kprobe.function("sys32_stat64") ?,
                         kprobe.function("sys_stat64") ?,
                         kprobe.function("sys_oabi_stat64") ?,
%( arch == "s390" %?
                         kprobe.function("compat_sys_s390_stat64") ?,
%)
%( arch == "x86_64" %?
                         kprobe.function("compat_sys_x86_stat64") ?,
%)
                         kprobe.function("compat_sys_newstat") ?
{
	@_SYSCALL_STAT_NAME
	asmlinkage()
	@_SYSCALL_STAT_REGARGS
	@_SYSCALL_STAT_ARGSTR
}

/* kernel 4.17+ */
probe nd2_syscall.stat =
	kprobe.function(@arch_syscall_prefix "sys_stat") ?,
	kprobe.function(@arch_syscall_prefix "sys_newstat") ?,
	kprobe.function(@arch_syscall_prefix "compat_sys_newstat") ?,
	kprobe.function(@arch_syscall_prefix "compat_sys_x86_stat64") ?
{
	__set_syscall_pt_regs(pointer_arg(1))
	@_SYSCALL_STAT_NAME
	@_SYSCALL_STAT_REGARGS
	@_SYSCALL_STAT_ARGSTR
}

/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.stat = __tp_syscall.stat,
                        __tp_syscall.stat64,
                        __tp_syscall.newstat
{
	__set_syscall_pt_regs($regs)
	@_SYSCALL_STAT_NAME
	@_SYSCALL_STAT_REGARGS
	@_SYSCALL_STAT_ARGSTR
}
probe __tp_syscall.stat = kernel.trace("sys_enter")
{
	@__syscall_compat_gate(@const("__NR_oldstat"), @const("__NR_compat_oldstat"))
}
probe __tp_syscall.stat64 = kernel.trace("sys_enter")
{
	@__syscall_compat_gate(@const("__NR_stat64"), @const("__NR_compat_stat64"))
}
probe __tp_syscall.newstat = kernel.trace("sys_enter")
{
	@__syscall_compat_gate(@const("__NR_stat"), @const("__NR_compat_stat"))
}

probe nd_syscall.stat.return = nd1_syscall.stat.return!, nd2_syscall.stat.return!, tp_syscall.stat.return
  { }

probe nd1_syscall.stat.return = kprobe.function("sys_stat").return ?,
	kprobe.function("sys_newstat").return ?,
	kprobe.function("sys32_stat64").return ?,
	kprobe.function("sys_stat64").return ?,
	kprobe.function("sys_oabi_stat64").return ?,
%( arch == "s390" %?
	kprobe.function("compat_sys_s390_stat64").return ?,
%)
%( arch == "x86_64" %?
	kprobe.function("compat_sys_x86_stat64").return ?,
%)
	kprobe.function("compat_sys_newstat").return ?
{
	@_SYSCALL_STAT_NAME
	@SYSC_RETVALSTR(returnval())
}

/* kernel 4.17+ */
probe nd2_syscall.stat.return =
	kprobe.function(@arch_syscall_prefix "sys_stat").return ?,
	kprobe.function(@arch_syscall_prefix "sys_newstat").return ?,
	kprobe.function(@arch_syscall_prefix "compat_sys_newstat").return ?,
	kprobe.function(@arch_syscall_prefix "compat_sys_x86_stat64").return
{
	@_SYSCALL_STAT_NAME
	@SYSC_RETVALSTR(returnval())
}

/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.stat.return = __tp_syscall.stat.return,
                               __tp_syscall.stat64.return,
                               __tp_syscall.newstat.return
{
	__set_syscall_pt_regs($regs)
	@_SYSCALL_STAT_NAME
	@SYSC_RETVALSTR($ret)
}
probe __tp_syscall.stat.return = kernel.trace("sys_exit")
{
	@__syscall_compat_gate(@const("__NR_oldstat"), @const("__NR_compat_oldstat"))
}
probe __tp_syscall.stat64.return = kernel.trace("sys_exit")
{
	@__syscall_compat_gate(@const("__NR_stat64"), @const("__NR_compat_stat64"))
}
probe __tp_syscall.newstat.return = kernel.trace("sys_exit")
{
	@__syscall_compat_gate(@const("__NR_stat"), @const("__NR_compat_stat"))
}
