# ioperm _____________________________________________________
# long sys_ioperm(unsigned long from, unsigned long num, int turn_on)
#

@define _SYSCALL_IOPERM_NAME
%(
	name = "ioperm"
%)

@define _SYSCALL_IOPERM_ARGSTR
%(
	argstr = sprintf("%#x, %#x, %#x", from, num, turn_on)
%)

@define _SYSCALL_IOPERM_REGARGS
%(
	from = ulong_arg(1)
	num = ulong_arg(2)
	turn_on = uint_arg(3)
%)

probe syscall.ioperm = dw_syscall.ioperm !, nd_syscall.ioperm ? {}
probe syscall.ioperm.return = dw_syscall.ioperm.return !, nd_syscall.ioperm.return ? {}

# dw_ioperm _____________________________________________________

probe dw_syscall.ioperm = kernel.function("sys_ioperm").call ?
{
	@_SYSCALL_IOPERM_NAME
	from = __ulong($from)
	num = __ulong($num)
	turn_on = __uint32($turn_on)
	@_SYSCALL_IOPERM_ARGSTR
}
probe dw_syscall.ioperm.return = kernel.function("sys_ioperm").return ?
{
	@_SYSCALL_IOPERM_NAME
	@SYSC_RETVALSTR($return)
}

# nd_ioperm _____________________________________________________

probe nd_syscall.ioperm = nd1_syscall.ioperm!, nd2_syscall.ioperm!, tp_syscall.ioperm
  { }

probe nd1_syscall.ioperm = kprobe.function("sys_ioperm") ?
{
	@_SYSCALL_IOPERM_NAME
	asmlinkage()
	@_SYSCALL_IOPERM_REGARGS
	@_SYSCALL_IOPERM_ARGSTR
}

/* kernel 4.17+ */
probe nd2_syscall.ioperm = kprobe.function(@arch_syscall_prefix "sys_ioperm") ?
{
	__set_syscall_pt_regs(pointer_arg(1))
	@_SYSCALL_IOPERM_NAME
	@_SYSCALL_IOPERM_REGARGS
	@_SYSCALL_IOPERM_ARGSTR
}

/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.ioperm = kernel.trace("sys_enter")
{
	__set_syscall_pt_regs($regs)
	@__syscall_compat_gate(@const("__NR_ioperm"), @const("__NR_compat_ioperm"))
	@_SYSCALL_IOPERM_NAME
	@_SYSCALL_IOPERM_REGARGS
	@_SYSCALL_IOPERM_ARGSTR
}

probe nd_syscall.ioperm.return = nd1_syscall.ioperm.return!, nd2_syscall.ioperm.return!, tp_syscall.ioperm.return
  { }
  
probe nd1_syscall.ioperm.return = kprobe.function("sys_ioperm").return ?
{
	@_SYSCALL_IOPERM_NAME
	@SYSC_RETVALSTR(returnval())
}

/* kernel 4.17+ */
probe nd2_syscall.ioperm.return = kprobe.function(@arch_syscall_prefix "sys_ioperm").return ?
{
	@_SYSCALL_IOPERM_NAME
	@SYSC_RETVALSTR(returnval())
}
 
/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.ioperm.return = kernel.trace("sys_exit")
{
	__set_syscall_pt_regs($regs)
	@__syscall_compat_gate(@const("__NR_ioperm"), @const("__NR_compat_ioperm"))
	@_SYSCALL_IOPERM_NAME
	@SYSC_RETVALSTR($ret)
}
