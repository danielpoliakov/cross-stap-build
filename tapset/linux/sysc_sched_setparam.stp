# sched_setparam _____________________________________________
#
# long sys_sched_setparam(pid_t pid, struct sched_param __user *param)
#

@define _SYSCALL_SCHED_SETPARAM_NAME
%(
	name = "sched_setparam"
%)

@define _SYSCALL_SCHED_SETPARAM_ARGSTR
%(
	argstr = sprintf("%d, %p", pid, p_uaddr)
%)

@define _SYSCALL_SCHED_SETPARAM_REGARGS
%(
	pid = int_arg(1)
	p_uaddr = pointer_arg(2)
%)

probe syscall.sched_setparam = dw_syscall.sched_setparam !,
                               nd_syscall.sched_setparam ? {}
probe syscall.sched_setparam.return = dw_syscall.sched_setparam.return !,
                                      nd_syscall.sched_setparam.return ? {}

# dw_sched_setparam _____________________________________________________

probe dw_syscall.sched_setparam = kernel.function("sys_sched_setparam").call ?
{
	@_SYSCALL_SCHED_SETPARAM_NAME
	pid = __int32($pid)
	p_uaddr = $param
	@_SYSCALL_SCHED_SETPARAM_ARGSTR
}
probe dw_syscall.sched_setparam.return = kernel.function("sys_sched_setparam").return ?
{
	@_SYSCALL_SCHED_SETPARAM_NAME
	@SYSC_RETVALSTR($return)
}

# nd_sched_setparam _____________________________________________________

probe nd_syscall.sched_setparam = nd1_syscall.sched_setparam!, nd2_syscall.sched_setparam!, tp_syscall.sched_setparam
  { }

probe nd1_syscall.sched_setparam = kprobe.function("sys_sched_setparam") ?
{
	@_SYSCALL_SCHED_SETPARAM_NAME
	asmlinkage()
	@_SYSCALL_SCHED_SETPARAM_REGARGS
	@_SYSCALL_SCHED_SETPARAM_ARGSTR
}

/* kernel 4.17+ */
probe nd2_syscall.sched_setparam = kprobe.function(@arch_syscall_prefix "sys_sched_setparam") ?
{
	__set_syscall_pt_regs(pointer_arg(1))
	@_SYSCALL_SCHED_SETPARAM_NAME
	@_SYSCALL_SCHED_SETPARAM_REGARGS
	@_SYSCALL_SCHED_SETPARAM_ARGSTR
}

/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.sched_setparam = kernel.trace("sys_enter")
{
	__set_syscall_pt_regs($regs)
	@__syscall_compat_gate(@const("__NR_sched_setparam"), @const("__NR_compat_sched_setparam"))
	@_SYSCALL_SCHED_SETPARAM_NAME
	@_SYSCALL_SCHED_SETPARAM_REGARGS
	@_SYSCALL_SCHED_SETPARAM_ARGSTR
}

probe nd_syscall.sched_setparam.return = nd1_syscall.sched_setparam.return!, nd2_syscall.sched_setparam.return!, tp_syscall.sched_setparam.return
  { }
  
probe nd1_syscall.sched_setparam.return = kprobe.function("sys_sched_setparam").return ?
{
	@_SYSCALL_SCHED_SETPARAM_NAME
	@SYSC_RETVALSTR(returnval())
}

/* kernel 4.17+ */
probe nd2_syscall.sched_setparam.return = kprobe.function(@arch_syscall_prefix "sys_sched_setparam").return ?
{
	@_SYSCALL_SCHED_SETPARAM_NAME
	@SYSC_RETVALSTR(returnval())
}
 
/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.sched_setparam.return = kernel.trace("sys_exit")
{
	__set_syscall_pt_regs($regs)
	@__syscall_compat_gate(@const("__NR_sched_setparam"), @const("__NR_compat_sched_setparam"))
	@_SYSCALL_SCHED_SETPARAM_NAME
	@SYSC_RETVALSTR($ret)
}
