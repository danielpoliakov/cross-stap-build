# iopl _______________________________________________________
# long sys_iopl(unsigned int level, struct pt_regs *regs);
# NOTE. This function is only in i386 and x86_64 and its args vary
# between those two archs.
#

@define _SYSCALL_IOPL_NAME
%(
	name = "iopl"
%)

@define _SYSCALL_IOPL_ARGSTR
%(
	argstr = sprint(level)
%)

@define _SYSCALL_IOPL_REGARGS
%(
	level = uint_arg(1)
%)

probe syscall.iopl = dw_syscall.iopl !, nd_syscall.iopl {}
probe syscall.iopl.return = dw_syscall.iopl.return !, nd_syscall.iopl.return {}

# dw_iopl _____________________________________________________

probe dw_syscall.iopl = kernel.function("sys_iopl")
{
	@_SYSCALL_IOPL_NAME
	level = __uint32(@choose_defined($level, $new_iopl))
	@_SYSCALL_IOPL_ARGSTR
}
probe dw_syscall.iopl.return = kernel.function("sys_iopl").return
{
	@_SYSCALL_IOPL_NAME
	@SYSC_RETVALSTR($return)
}

# nd_iopl _____________________________________________________

probe nd_syscall.iopl = nd1_syscall.iopl!, nd2_syscall.iopl!, tp_syscall.iopl
  { }

probe nd1_syscall.iopl = kprobe.function("sys_iopl")
{
	@_SYSCALL_IOPL_NAME
	asmlinkage()
	@_SYSCALL_IOPL_REGARGS
	@_SYSCALL_IOPL_ARGSTR
}

/* kernel 4.17+ */
probe nd2_syscall.iopl = kprobe.function(@arch_syscall_prefix "sys_iopl") ?
{
	__set_syscall_pt_regs(pointer_arg(1))
	@_SYSCALL_IOPL_NAME
	@_SYSCALL_IOPL_REGARGS
	@_SYSCALL_IOPL_ARGSTR
}

/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.iopl = kernel.trace("sys_enter")
{
	__set_syscall_pt_regs($regs)
	@__syscall_compat_gate(@const("__NR_iopl"), @const("__NR_ia32_iopl"))
	@_SYSCALL_IOPL_NAME
	@_SYSCALL_IOPL_REGARGS
	@_SYSCALL_IOPL_ARGSTR
}

probe nd_syscall.iopl.return = nd1_syscall.iopl.return!, nd2_syscall.iopl.return!, tp_syscall.iopl.return
  { }
  
probe nd1_syscall.iopl.return = kprobe.function("sys_iopl").return
{
	@_SYSCALL_IOPL_NAME
	@SYSC_RETVALSTR(returnval())
}

/* kernel 4.17+ */
probe nd2_syscall.iopl.return = kprobe.function(@arch_syscall_prefix "sys_iopl").return ?
{
	@_SYSCALL_IOPL_NAME
	@SYSC_RETVALSTR(returnval())
}
 
/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.iopl.return = kernel.trace("sys_exit")
{
	__set_syscall_pt_regs($regs)
	@__syscall_compat_gate(@const("__NR_iopl"), @const("__NR_ia32_iopl"))
	@_SYSCALL_IOPL_NAME
	@SYSC_RETVALSTR($ret)
}
