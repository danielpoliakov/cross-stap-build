# fallocate __________________________________________________
#
# asmlinkage long compat_sys_fallocate(int fd, int mode, u32 offhi, u32 offlo,
#				     u32 lenhi, u32 lenlo)

@define _SYSCALL_COMPAT_FALLOCATE_NAME
%(
	name = "fallocate"
%)

@define _SYSCALL_COMPAT_FALLOCATE_ARGSTR
%(
	argstr = sprintf("%d, %s, %#x, %u", fd, mode_str, offset, len)
%)

@define _SYSCALL_COMPAT_FALLOCATE_REGARGS
%(
	fd = int_arg(1)
	mode = int_arg(2)
	mode_str = _stp_fallocate_mode_str(mode)
	offset = ((uint_arg(3) << 32) | uint_arg(4))
	len = ((uint_arg(5) << 32) | uint_arg(6))
%)

probe syscall.compat_fallocate = dw_syscall.compat_fallocate !,
                                 nd_syscall.compat_fallocate ? {}
probe syscall.compat_fallocate.return = dw_syscall.compat_fallocate.return !,
                                 nd_syscall.compat_fallocate.return ? {}

# dw_compat_fallocate _____________________________________________________

probe dw_syscall.compat_fallocate = kernel.function("compat_sys_fallocate") ?
{
	@_SYSCALL_COMPAT_FALLOCATE_NAME
	fd = __int32($fd)
	mode = __int32($mode)
	mode_str = _stp_fallocate_mode_str(mode)
	offset = (($offhi << 32) | $offlo)
	len = (($lenhi << 32) | $lenlo)
	@_SYSCALL_COMPAT_FALLOCATE_ARGSTR
}
probe dw_syscall.compat_fallocate.return =
	kernel.function("compat_sys_fallocate").return ?
{
	@_SYSCALL_COMPAT_FALLOCATE_NAME
	@SYSC_RETVALSTR($return)
}

# nd_compat_fallocate _____________________________________________________

probe nd_syscall.compat_fallocate = nd1_syscall.compat_fallocate!, tp_syscall.compat_fallocate
  { }

probe nd1_syscall.compat_fallocate = kprobe.function("compat_sys_fallocate") ?
{
	asmlinkage()
	@_SYSCALL_COMPAT_FALLOCATE_NAME
	@_SYSCALL_COMPAT_FALLOCATE_REGARGS
	@_SYSCALL_COMPAT_FALLOCATE_ARGSTR
}

/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.compat_fallocate = kernel.trace("sys_enter")
{
	__set_syscall_pt_regs($regs)
	@__compat_syscall_gate(@const("__NR_fallocate"))
	@_SYSCALL_COMPAT_FALLOCATE_NAME
	@_SYSCALL_COMPAT_FALLOCATE_REGARGS
	@_SYSCALL_COMPAT_FALLOCATE_ARGSTR
}

probe nd_syscall.compat_fallocate.return = nd1_syscall.compat_fallocate.return!, tp_syscall.compat_fallocate.return
  { }
  
probe nd1_syscall.compat_fallocate.return =
	kprobe.function("compat_sys_fallocate").return ?
{
	@_SYSCALL_COMPAT_FALLOCATE_NAME
	@SYSC_RETVALSTR(returnval())
}
 
/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.compat_fallocate.return = kernel.trace("sys_exit")
{
	__set_syscall_pt_regs($regs)
	@__compat_syscall_gate(@const("__NR_fallocate"))
	@_SYSCALL_COMPAT_FALLOCATE_NAME
	@SYSC_RETVALSTR($ret)
}
