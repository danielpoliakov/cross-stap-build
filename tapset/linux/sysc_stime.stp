# stime ______________________________________________________
#
# long sys_stime(time_t __user *tptr)
# long compat_sys_stime(compat_time_t __user *tptr)
#

@define _SYSCALL_STIME_NAME
%(
	name = "stime"
%)

@define _SYSCALL_STIME_ARGSTR
%(
	argstr = sprintf("%p", t_uaddr)
%)

@define _SYSCALL_STIME_REGARGS
%(
	t_uaddr = pointer_arg(1)
%)

probe syscall.stime = dw_syscall.stime !, nd_syscall.stime ? {}
probe syscall.stime.return = dw_syscall.stime.return !,
                             nd_syscall.stime.return ? {}

# dw_stime _____________________________________________________

probe dw_syscall.stime = kernel.function("compat_sys_stime").call ?,
                      kernel.function("sys_stime").call ?
{
	@_SYSCALL_STIME_NAME
	t_uaddr = $tptr
	/* FIXME. Decode time */
	@_SYSCALL_STIME_ARGSTR
}
probe dw_syscall.stime.return = kernel.function("compat_sys_stime").return ?,
                             kernel.function("sys_stime").return ?
{
	@_SYSCALL_STIME_NAME
	@SYSC_RETVALSTR($return)
}

# nd_stime _____________________________________________________

probe nd_syscall.stime = nd1_syscall.stime!, nd2_syscall.stime!, tp_syscall.stime
  { }

probe nd1_syscall.stime = kprobe.function("compat_sys_stime") ?,
                         kprobe.function("sys_stime") ?
{
	@_SYSCALL_STIME_NAME
	asmlinkage()
	@_SYSCALL_STIME_REGARGS
	/* FIXME. Decode time */
	@_SYSCALL_STIME_ARGSTR
}

/* kernel 4.17+ */
probe nd2_syscall.stime = kprobe.function(@arch_syscall_prefix "compat_sys_stime") ?,
	kprobe.function(@arch_syscall_prefix "sys_stime") ?
{
	__set_syscall_pt_regs(pointer_arg(1))
	@_SYSCALL_STIME_NAME
	@_SYSCALL_STIME_REGARGS
	/* FIXME. Decode time */
	@_SYSCALL_STIME_ARGSTR
}

/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.stime = kernel.trace("sys_enter")
{
	__set_syscall_pt_regs($regs)
	@__syscall_compat_gate(@const("__NR_stime"), @const("__NR_compat_stime"))
	@_SYSCALL_STIME_NAME
	@_SYSCALL_STIME_REGARGS
	@_SYSCALL_STIME_ARGSTR
}

probe nd_syscall.stime.return = nd1_syscall.stime.return!, nd2_syscall.stime.return!, tp_syscall.stime.return
  { }
  
probe nd1_syscall.stime.return = kprobe.function("compat_sys_stime").return ?,
                                kprobe.function("sys_stime").return ?
{
	@_SYSCALL_STIME_NAME
	@SYSC_RETVALSTR(returnval())
}

/* kernel 4.17+ */
probe nd2_syscall.stime.return = kprobe.function(@arch_syscall_prefix "compat_sys_stime") ?,
	kprobe.function(@arch_syscall_prefix "sys_stime").return ?
{
	@_SYSCALL_STIME_NAME
	@SYSC_RETVALSTR(returnval())
}
 
/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.stime.return = kernel.trace("sys_exit")
{
	__set_syscall_pt_regs($regs)
	@__syscall_compat_gate(@const("__NR_stime"), @const("__NR_compat_stime"))
	@_SYSCALL_STIME_NAME
	@SYSC_RETVALSTR($ret)
}
