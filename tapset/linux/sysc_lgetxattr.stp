# lgetxattr __________________________________________________
# ssize_t sys_lgetxattr(char __user *path,
#               char __user *name,
#               void __user *value,
#               size_t size)
#

@define _SYSCALL_LGETXATTR_NAME
%(
	name = "lgetxattr"
%)

@define _SYSCALL_LGETXATTR_ARGSTR
%(
	argstr = sprintf("%s, %s, %p, %u", path, name_str, value_uaddr, size)
%)

@define _SYSCALL_LGETXATTR_REGARGS
%(
	path = user_string_quoted(pointer_arg(1))
# 'name2' should have been 'name_str'.  Deprecate the old name.
%(systemtap_v <= "1.4" %?
	name2 = user_string_quoted(pointer_arg(2))
%)
	name_str = user_string_quoted(pointer_arg(2))
	value_uaddr = pointer_arg(3)
	size = ulong_arg(4)
%)

probe syscall.lgetxattr = dw_syscall.lgetxattr !, nd_syscall.lgetxattr ? {}
probe syscall.lgetxattr.return = dw_syscall.lgetxattr.return !, nd_syscall.lgetxattr.return ? {}

# dw_lgetxattr _____________________________________________________

probe dw_syscall.lgetxattr = kernel.function("sys_lgetxattr").call
{
	@_SYSCALL_LGETXATTR_NAME
	path = user_string_quoted(@choose_defined($pathname, $path))
# 'name2' should have been 'name_str'.  Deprecate the old name.
%(systemtap_v <= "1.4" %?
	name2 = user_string_quoted($name)
%)
	name_str = user_string_quoted($name)
	value_uaddr = $value
	size = __ulong($size)
	@_SYSCALL_LGETXATTR_ARGSTR
}
probe dw_syscall.lgetxattr.return = kernel.function("sys_lgetxattr").return
{
	@_SYSCALL_LGETXATTR_NAME
	@SYSC_RETVALSTR($return)
}

# nd_lgetxattr _____________________________________________________

probe nd_syscall.lgetxattr = nd1_syscall.lgetxattr!, nd2_syscall.lgetxattr!, tp_syscall.lgetxattr
  { }

probe nd1_syscall.lgetxattr = kprobe.function("sys_lgetxattr") ?
{
	@_SYSCALL_LGETXATTR_NAME
	asmlinkage()
	@_SYSCALL_LGETXATTR_REGARGS
	@_SYSCALL_LGETXATTR_ARGSTR
}

/* kernel 4.17+ */
probe nd2_syscall.lgetxattr = kprobe.function(@arch_syscall_prefix "sys_lgetxattr") ?
{
	__set_syscall_pt_regs(pointer_arg(1))
	@_SYSCALL_LGETXATTR_NAME
	@_SYSCALL_LGETXATTR_REGARGS
	@_SYSCALL_LGETXATTR_ARGSTR
}

/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.lgetxattr = kernel.trace("sys_enter")
{
	__set_syscall_pt_regs($regs)
	@__syscall_compat_gate(@const("__NR_lgetxattr"), @const("__NR_compat_lgetxattr"))
	@_SYSCALL_LGETXATTR_NAME
	@_SYSCALL_LGETXATTR_REGARGS
	@_SYSCALL_LGETXATTR_ARGSTR
}

probe nd_syscall.lgetxattr.return = nd1_syscall.lgetxattr.return!, nd2_syscall.lgetxattr.return!, tp_syscall.lgetxattr.return
  { }

probe nd1_syscall.lgetxattr.return = kprobe.function("sys_lgetxattr").return ?
{
	@_SYSCALL_LGETXATTR_NAME
	@SYSC_RETVALSTR(returnval())
}

/* kernel 4.17+ */
probe nd2_syscall.lgetxattr.return = kprobe.function(@arch_syscall_prefix "sys_lgetxattr").return ?
{
	@_SYSCALL_LGETXATTR_NAME
	@SYSC_RETVALSTR(returnval())
}
 
/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.lgetxattr.return = kernel.trace("sys_exit")
{
	__set_syscall_pt_regs($regs)
	@__syscall_compat_gate(@const("__NR_lgetxattr"), @const("__NR_compat_lgetxattr"))
	@_SYSCALL_LGETXATTR_NAME
	@SYSC_RETVALSTR($ret)
}
