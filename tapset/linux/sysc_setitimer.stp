# setitimer __________________________________________________
#
# long sys_setitimer(int which,
#		   struct itimerval __user *value,
#		   struct itimerval __user *ovalue)
#

@define _SYSCALL_SETITIMER_NAME
%(
	name = "setitimer"
%)

@define _SYSCALL_SETITIMER_ARGSTR
%(
	argstr = sprintf("%s, %s, %p", which_str, value_str, ovalue_uaddr)
%)

@define _SYSCALL_SETITIMER_REGARGS
%(
	which = int_arg(1)
	which_str = _itimer_which_str(which)
	value_uaddr = pointer_arg(2)
	ovalue_uaddr = pointer_arg(3)
%)

probe syscall.setitimer = dw_syscall.setitimer !, nd_syscall.setitimer ? {}
probe syscall.setitimer.return = dw_syscall.setitimer.return !,
                                 nd_syscall.setitimer.return ? {}

# dw_setitimer _____________________________________________________

probe dw_syscall.setitimer = kernel.function("sys_setitimer").call
{
	@_SYSCALL_SETITIMER_NAME
	which = __int32($which)
	which_str = _itimer_which_str(which)
	value_uaddr = $value
	value_str = _struct_itimerval_u(value_uaddr)
	ovalue_uaddr = $ovalue
	@_SYSCALL_SETITIMER_ARGSTR
}
probe dw_syscall.setitimer.return = kernel.function("sys_setitimer").return
{
	@_SYSCALL_SETITIMER_NAME
	@SYSC_RETVALSTR($return)
}

# nd_setitimer _____________________________________________________

probe nd_syscall.setitimer = nd1_syscall.setitimer!, nd2_syscall.setitimer!, tp_syscall.setitimer
  { }

probe nd1_syscall.setitimer = kprobe.function("sys_setitimer") ?
{
	@_SYSCALL_SETITIMER_NAME
	asmlinkage()
	@_SYSCALL_SETITIMER_REGARGS
	value_str = _struct_itimerval_u(value_uaddr)
	@_SYSCALL_SETITIMER_ARGSTR
}

/* kernel 4.17+ */
probe nd2_syscall.setitimer = kprobe.function(@arch_syscall_prefix "sys_setitimer") ?
{
	__set_syscall_pt_regs(pointer_arg(1))
	@_SYSCALL_SETITIMER_NAME
	@_SYSCALL_SETITIMER_REGARGS
	value_str = _struct_itimerval_u(value_uaddr)
	@_SYSCALL_SETITIMER_ARGSTR
}

/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.setitimer = kernel.trace("sys_enter")
{
	__set_syscall_pt_regs($regs)
	@__syscall_gate(@const("__NR_setitimer"))
	@_SYSCALL_SETITIMER_NAME
	@_SYSCALL_SETITIMER_REGARGS
	value_str = _struct_itimerval_u(value_uaddr)
	@_SYSCALL_SETITIMER_ARGSTR
}

probe nd_syscall.setitimer.return = nd1_syscall.setitimer.return!, nd2_syscall.setitimer.return!, tp_syscall.setitimer.return
  { }
  
probe nd1_syscall.setitimer.return = kprobe.function("sys_setitimer").return ?
{
	@_SYSCALL_SETITIMER_NAME
	@SYSC_RETVALSTR(returnval())
}

/* kernel 4.17+ */
probe nd2_syscall.setitimer.return = kprobe.function(@arch_syscall_prefix "sys_setitimer").return ?
{
	@_SYSCALL_SETITIMER_NAME
	@SYSC_RETVALSTR(returnval())
}
 
/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.setitimer.return = kernel.trace("sys_exit")
{
	__set_syscall_pt_regs($regs)
	@__syscall_gate(@const("__NR_setitimer"))
	@_SYSCALL_SETITIMER_NAME
	@SYSC_RETVALSTR($ret)
}

# long compat_sys_setitimer(int which,
#		struct compat_itimerval __user *in,
#		struct compat_itimerval __user *out)
#

probe syscall.compat_setitimer = dw_syscall.compat_setitimer !,
                                 nd_syscall.compat_setitimer ? {}
probe syscall.compat_setitimer.return = dw_syscall.compat_setitimer.return !,
                                        nd_syscall.compat_setitimer.return ? {}

# dw_compat_setitimer _____________________________________________________

probe dw_syscall.compat_setitimer = kernel.function("compat_sys_setitimer").call ?
{
	@_SYSCALL_SETITIMER_NAME
	which = __int32($which)
	which_str = _itimer_which_str(which)
	value_uaddr = @__pointer($in)
	value_str = _struct_compat_itimerval_u(value_uaddr)
	ovalue_uaddr = @__pointer($out)
	@_SYSCALL_SETITIMER_ARGSTR
}
probe dw_syscall.compat_setitimer.return = kernel.function("compat_sys_setitimer").return ?
{
	@_SYSCALL_SETITIMER_NAME
	@SYSC_RETVALSTR($return)
}

# nd_compat_setitimer _____________________________________________________

probe nd_syscall.compat_setitimer = nd1_syscall.compat_setitimer!, nd2_syscall.compat_setitimer!, tp_syscall.compat_setitimer
  { }

probe nd1_syscall.compat_setitimer = kprobe.function("compat_sys_setitimer") ?
{
	@_SYSCALL_SETITIMER_NAME
	asmlinkage()
	@_SYSCALL_SETITIMER_REGARGS
	value_str = _struct_compat_itimerval_u(value_uaddr)
	@_SYSCALL_SETITIMER_ARGSTR
}

/* kernel 4.17+ */
probe nd2_syscall.compat_setitimer = kprobe.function(@arch_syscall_prefix "compat_sys_setitimer") ?
{
	__set_syscall_pt_regs(pointer_arg(1))
	@_SYSCALL_SETITIMER_NAME
	@_SYSCALL_SETITIMER_REGARGS
	value_str = _struct_compat_itimerval_u(value_uaddr)
	@_SYSCALL_SETITIMER_ARGSTR
}

/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.compat_setitimer = kernel.trace("sys_enter")
{
	__set_syscall_pt_regs($regs)
	@__compat_syscall_gate(@const("__NR_compat_setitimer"))
	@_SYSCALL_SETITIMER_NAME
	@_SYSCALL_SETITIMER_REGARGS
	value_str = _struct_compat_itimerval_u(value_uaddr)
	@_SYSCALL_SETITIMER_ARGSTR
}

probe nd_syscall.compat_setitimer.return = nd1_syscall.compat_setitimer.return!, nd2_syscall.compat_setitimer.return!, tp_syscall.compat_setitimer.return
  { }
  
probe nd1_syscall.compat_setitimer.return = kprobe.function("compat_sys_setitimer").return ?
{
	@_SYSCALL_SETITIMER_NAME
	@SYSC_RETVALSTR(returnval())
}

/* kernel 4.17+ */
probe nd2_syscall.compat_setitimer.return = kprobe.function(@arch_syscall_prefix "compat_sys_setitimer").return ?
{
	@_SYSCALL_SETITIMER_NAME
	@SYSC_RETVALSTR(returnval())
}
 
/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.compat_setitimer.return = kernel.trace("sys_exit")
{
	__set_syscall_pt_regs($regs)
	@__compat_syscall_gate(@const("__NR_compat_setitimer"))
	@_SYSCALL_SETITIMER_NAME
	@SYSC_RETVALSTR($ret)
}
