# finit_module ________________________________________________
# SYSCALL_DEFINE3(finit_module, int, fd, const char __user *, uargs,
#		  int, flags)
#

@define _SYSCALL_FINIT_MODULE_NAME
%(
	name = "finit_module"
%)

@define _SYSCALL_FINIT_MODULE_ARGSTR
%(
	argstr = sprintf("%d, %s, %s", fd, uargs, flags_str)
%)

@define _SYSCALL_FINIT_MODULE_REGARGS
%(
	fd = int_arg(1)
	uargs = user_string_quoted(pointer_arg(2))
	flags = int_arg(3)
	flags_str = _finit_module_flags_str(flags)
%)

probe syscall.finit_module = dw_syscall.finit_module !, nd_syscall.finit_module ? {}
probe syscall.finit_module.return = dw_syscall.finit_module.return !, nd_syscall.finit_module.return ? {}

# dw_finit_module _____________________________________________________

probe dw_syscall.finit_module = kernel.function("sys_finit_module").call ?
{
	@_SYSCALL_FINIT_MODULE_NAME
	fd = __int32($fd)
	uargs = user_string_quoted($uargs)
	flags = __int32($flags)
	flags_str = _finit_module_flags_str(__int32($flags))
	@_SYSCALL_FINIT_MODULE_ARGSTR
}
probe dw_syscall.finit_module.return = kernel.function("sys_finit_module").return ?
{
	@_SYSCALL_FINIT_MODULE_NAME
	@SYSC_RETVALSTR($return)
}

# nd_finit_module _____________________________________________________

probe nd_syscall.finit_module = nd1_syscall.finit_module!, nd2_syscall.finit_module!, tp_syscall.finit_module
  { }

probe nd1_syscall.finit_module = kprobe.function("sys_finit_module").call ?
{
	@_SYSCALL_FINIT_MODULE_NAME
	asmlinkage()
	@_SYSCALL_FINIT_MODULE_REGARGS
	@_SYSCALL_FINIT_MODULE_ARGSTR
}

/* kernel 4.17+ */
probe nd2_syscall.finit_module = kprobe.function(@arch_syscall_prefix "sys_finit_module") ?
{
	__set_syscall_pt_regs(pointer_arg(1))
	@_SYSCALL_FINIT_MODULE_NAME
	@_SYSCALL_FINIT_MODULE_REGARGS
	@_SYSCALL_FINIT_MODULE_ARGSTR
}

/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.finit_module = kernel.trace("sys_enter")
{
	__set_syscall_pt_regs($regs)
	@__syscall_compat_gate(@const("__NR_finit_module"), @const("__NR_compat_finit_module"))
	@_SYSCALL_FINIT_MODULE_NAME
	@_SYSCALL_FINIT_MODULE_REGARGS
	@_SYSCALL_FINIT_MODULE_ARGSTR
}

probe nd_syscall.finit_module.return = nd1_syscall.finit_module.return!, nd2_syscall.finit_module.return!, tp_syscall.finit_module.return
  { }
  
probe nd1_syscall.finit_module.return =
	kprobe.function("sys_finit_module").return ?
{
	@_SYSCALL_FINIT_MODULE_NAME
	@SYSC_RETVALSTR(returnval())
}

/* kernel 4.17+ */
probe nd2_syscall.finit_module.return = kprobe.function(@arch_syscall_prefix "sys_finit_module").return ?
{
	@_SYSCALL_FINIT_MODULE_NAME
	@SYSC_RETVALSTR(returnval())
}
 
/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.finit_module.return = kernel.trace("sys_exit")
{
	__set_syscall_pt_regs($regs)
	@__syscall_compat_gate(@const("__NR_finit_module"), @const("__NR_compat_finit_module"))
	@_SYSCALL_FINIT_MODULE_NAME
	@SYSC_RETVALSTR($ret)
}
