# fchownat ___________________________________________________
# new function with 2.6.16
# long sys_fchownat(int dfd, const char __user *filename,
#	uid_t user, gid_t group, int flag)

@define _SYSCALL_FCHOWNAT_NAME
%(
	name = "fchownat"
%)

@define _SYSCALL_FCHOWNAT_ARGSTR
%(
	argstr = sprintf("%s, %s, %d, %d, %s", dirfd_str, pathname, owner,
	                 group, flags_str)
%)

@define _SYSCALL_FCHOWNAT_REGARGS
%(
	dirfd = int_arg(1)
	dirfd_str = _dfd_str(dirfd)
	pathname = user_string_quoted(pointer_arg(2))
	owner = __int32(uint_arg(3))
	group = __int32(uint_arg(4))
	flags = int_arg(5)
	flags_str = _at_flag_str(flags)
%)

probe syscall.fchownat = dw_syscall.fchownat !, nd_syscall.fchownat ? {}
probe syscall.fchownat.return = dw_syscall.fchownat.return !, nd_syscall.fchownat.return ? {}

# dw_fchownat _____________________________________________________

probe dw_syscall.fchownat = kernel.function("sys_fchownat").call ?
{
	@__syscall_compat_gate(@const("__NR_fchownat"),
			       @const("__NR_compat_fchownat"))
	@_SYSCALL_FCHOWNAT_NAME
	dirfd = __int32($dfd)
	dirfd_str = _dfd_str(__int32($dfd))
	pathname = user_string_quoted($filename)
	owner = __int32($user)
	group = __int32($group)
	flags = __int32($flag)
	flags_str = _at_flag_str(__int32($flag))
	@_SYSCALL_FCHOWNAT_ARGSTR
}
probe dw_syscall.fchownat.return = kernel.function("sys_fchownat").return ?
{
	@__syscall_compat_gate(@const("__NR_fchownat"),
			       @const("__NR_compat_fchownat"))
	@_SYSCALL_FCHOWNAT_NAME
	@SYSC_RETVALSTR($return)
}

# nd_fchownat _____________________________________________________

probe nd_syscall.fchownat = nd1_syscall.fchownat!, nd2_syscall.fchownat!, tp_syscall.fchownat
  { }

probe nd1_syscall.fchownat = kprobe.function("sys_fchownat") ?
{
	@__syscall_compat_gate(@const("__NR_fchownat"),
			       @const("__NR_compat_fchownat"))
	@_SYSCALL_FCHOWNAT_NAME
	asmlinkage()
	@_SYSCALL_FCHOWNAT_REGARGS
	@_SYSCALL_FCHOWNAT_ARGSTR
}

/* kernel 4.17+ */
probe nd2_syscall.fchownat = kprobe.function(@arch_syscall_prefix "sys_fchownat") ?
{
	__set_syscall_pt_regs(pointer_arg(1))
	@_SYSCALL_FCHOWNAT_NAME
	@_SYSCALL_FCHOWNAT_REGARGS
	@_SYSCALL_FCHOWNAT_ARGSTR
}

/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.fchownat = kernel.trace("sys_enter")
{
	__set_syscall_pt_regs($regs)
	@__syscall_compat_gate(@const("__NR_fchownat"), @const("__NR_compat_fchownat"))
	@_SYSCALL_FCHOWNAT_NAME
	@_SYSCALL_FCHOWNAT_REGARGS
	@_SYSCALL_FCHOWNAT_ARGSTR
}

probe nd_syscall.fchownat.return = nd1_syscall.fchownat.return!, nd2_syscall.fchownat.return!, tp_syscall.fchownat.return
  { }
  
probe nd1_syscall.fchownat.return = kprobe.function("sys_fchownat").return ?
{
	@__syscall_compat_gate(@const("__NR_fchownat"),
			       @const("__NR_compat_fchownat"))
	@_SYSCALL_FCHOWNAT_NAME
	@SYSC_RETVALSTR(returnval())
}

/* kernel 4.17+ */
probe nd2_syscall.fchownat.return = kprobe.function(@arch_syscall_prefix "sys_fchownat").return ?
{
	@_SYSCALL_FCHOWNAT_NAME
	@SYSC_RETVALSTR(returnval())
}
 
/* kernel 3.5+, but undesirable because it affects all syscalls */
probe tp_syscall.fchownat.return = kernel.trace("sys_exit")
{
	__set_syscall_pt_regs($regs)
	@__syscall_compat_gate(@const("__NR_fchownat"), @const("__NR_compat_fchownat"))
	@_SYSCALL_FCHOWNAT_NAME
	@SYSC_RETVALSTR($ret)
}
