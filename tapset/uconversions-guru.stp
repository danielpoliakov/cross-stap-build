/**
 * sfunction set_user_string - Writes a string to user memory
 * @addr: The user address to write the string to
 * @val: The string which is to be written
 *
 * Description: Writes the given string to a given user memory address.
 * Reports an error when writing to the given address fails.
 * Requires the use of guru mode (-g).
 */
function set_user_string (addr:long, val:string) %{ /* guru */
  __label__ deref_fault;
  store_uderef_string (STAP_ARG_val, STAP_ARG_addr, MAXSTRINGLEN);
  if (0) {
deref_fault: /* branched to from store_deref_string() */
    snprintf (CONTEXT->error_buffer, sizeof(CONTEXT->error_buffer),
        "user string copy fault at 0x%p [man error::fault]", (void *) (uintptr_t) STAP_ARG_addr);
    CONTEXT->last_error = CONTEXT->error_buffer;
  }
%}

/**
 * sfunction set_user_string_n - Writes a string of given length to user memory
 * @addr: The user address to write the string to
 * @n: The maximum length of the string
 * @val: The string which is to be written
 *
 * Description: Writes the given string up to a maximum given length to a given
 * user memory address. Reports an error on string copy fault.
 * Requires the use of guru mode (-g).
 */
function set_user_string_n (addr:long, n:long, val:string) %{ /* guru */
  __label__ deref_fault;
  int64_t len = clamp_t(int64_t, STAP_ARG_n + 1, 1, MAXSTRINGLEN);
  store_uderef_string (STAP_ARG_val, STAP_ARG_addr, len);
  if (0) {
deref_fault: /* branched to from store_deref_string() */
    snprintf (CONTEXT->error_buffer, sizeof(CONTEXT->error_buffer),
        "user string copy fault at 0x%p [man error::fault]", (void *) (uintptr_t) STAP_ARG_addr);
    CONTEXT->last_error = CONTEXT->error_buffer;
  }
%}

/**
 * sfunction set_user_long - Writes a long value to user memory
 * @addr: The user address to write the long to
 * @val: The long which is to be written
 *
 * Description: Writes the long value to a given user memory address.
 * Reports an error when writing to the given address fails.
 * Requires the use of guru mode (-g).
 */
function set_user_long (addr:long, val:long) %{ /* guru */
  __label__ deref_fault;
  uwrite((long *) (uintptr_t) STAP_ARG_addr, STAP_ARG_val);
  if (0) {
deref_fault: /* branched to from uwrite() */
    snprintf (CONTEXT->error_buffer, sizeof(CONTEXT->error_buffer),
        "user long copy fault at 0x%p [man error::fault]", (void *) (uintptr_t) STAP_ARG_addr);
    CONTEXT->last_error = CONTEXT->error_buffer;
  }
%}

/**
 * sfunction set_user_int - Writes an int value to user memory
 * @addr: The user address to write the int to
 * @val: The int which is to be written
 *
 * Description: Writes the int value to a given user memory address.
 * Reports an error when writing to the given address fails.
 * Requires the use of guru mode (-g).
 */
function set_user_int (addr:long, val:long) %{ /* guru */
  __label__ deref_fault;
  uwrite((int *) (uintptr_t) STAP_ARG_addr, STAP_ARG_val);
  if (0) {
deref_fault: /* branched to from uwrite() */
    snprintf (CONTEXT->error_buffer, sizeof(CONTEXT->error_buffer),
        "user int copy fault at 0x%p [man error::fault]", (void *) (uintptr_t) STAP_ARG_addr);
    CONTEXT->last_error = CONTEXT->error_buffer;
  }
%}

/**
 * sfunction set_user_short - Writes a short value to user memory
 * @addr: The user address to write the short to
 * @val: The short which is to be written
 *
 * Description: Writes the short value to a given user memory address.
 * Reports an error when writing to the given address fails.
 * Requires the use of guru mode (-g).
 */
function set_user_short (addr:long, val:long) %{ /* guru */
  __label__ deref_fault;
  uwrite((short *) (uintptr_t) STAP_ARG_addr, STAP_ARG_val);
  if (0) {
deref_fault: /* branched to from uwrite() */
    snprintf (CONTEXT->error_buffer, sizeof(CONTEXT->error_buffer),
        "user short copy fault at 0x%p [man error::fault]", (void *) (uintptr_t) STAP_ARG_addr);
    CONTEXT->last_error = CONTEXT->error_buffer;
  }
%}

/**
 * sfunction set_user_char - Writes a char value to user memory
 * @addr: The user address to write the char to
 * @val: The char which is to be written
 *
 * Description: Writes the char value to a given user memory address.
 * Reports an error when writing to the given address fails.
 * Requires the use of guru mode (-g).
 */
function set_user_char (addr:long, val:long) %{ /* guru */
  __label__ deref_fault;
  uwrite((char *) (uintptr_t) STAP_ARG_addr, STAP_ARG_val);
  if (0) {
deref_fault: /* branched to from uwrite() */
    snprintf (CONTEXT->error_buffer, sizeof(CONTEXT->error_buffer),
        "user char copy fault at 0x%p [man error::fault]", (void *) (uintptr_t) STAP_ARG_addr);
    CONTEXT->last_error = CONTEXT->error_buffer;
  }
%}

/**
 * sfunction set_user_pointer - Writes a pointer value to user memory.
 * @addr: The user address to write the pointer to
 * @val: The pointer which is to be written
 *
 * Description: Writes the pointer value to a given user memory address.
 * Reports an error when writing to the given address fails.
 * Requires the use of guru mode (-g).
 */
function set_user_pointer (addr:long, val:long) %{ /* guru */
  __label__ deref_fault;
  uwrite((void **) (uintptr_t) STAP_ARG_addr, (uintptr_t)STAP_ARG_val);
  if (0) {
deref_fault: /* branched to from uwrite() */
    snprintf (CONTEXT->error_buffer, sizeof(CONTEXT->error_buffer),
        "user pointer copy fault at 0x%p [man error::fault]", (void *) (uintptr_t) STAP_ARG_addr);
    CONTEXT->last_error = CONTEXT->error_buffer;
  }
%}

